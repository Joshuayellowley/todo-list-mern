{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_apps\\\\mern-todo-app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close'; // import Form from './form';\n\nconst TodosQuery = gql`\n{\n  todos {\n    id\n    text\n    complete\n  }\n}\n`;\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n  `;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.updateTodo = async todo => {\n      await this.props.updateTodo({\n        variables: {\n          id: todo.id,\n          complete: !todo.complete\n        }\n      });\n    };\n  }\n\n  render() {\n    //Save the mongodb todos and loading status to props\n    const {\n      data: {\n        loading,\n        todos\n      }\n    } = this.props;\n\n    if (loading) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: \"auto\",\n        width: 400\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      elevation: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, todos.map(todo => /*#__PURE__*/React.createElement(ListItem, {\n      key: todo.id,\n      role: undefined,\n      dense: true,\n      button: true //call update todo function when list item is clicked\n      ,\n      onClick: () => this.updateTodo(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox // each todo's complete status is \n    //set as the checked state in the checkbox component\n    , {\n      checked: todo.complete //tabIndex={-1}\n      ,\n      disableRipple: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: todo.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(ListItemSecondaryAction, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      onClick: () => this.removeTodo(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }\n    })))))))));\n  }\n\n}\n\nexport default compose(graphql(TodosQuery), graphql(UpdateMutation, {\n  name: 'updateTodo'\n}))(App);","map":{"version":3,"sources":["D:/react_apps/mern-todo-app/client/src/App.js"],"names":["React","Component","gql","graphql","compose","Paper","List","ListItem","ListItemSecondaryAction","ListItemText","Checkbox","IconButton","CloseIcon","TodosQuery","UpdateMutation","App","updateTodo","todo","props","variables","id","complete","render","data","loading","todos","display","margin","width","map","undefined","text","removeTodo","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from \"graphql-tag\";\nimport { graphql, compose } from 'react-apollo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n// import Form from './form';\n\n\nconst TodosQuery = gql`\n{\n  todos {\n    id\n    text\n    complete\n  }\n}\n`;\n\nconst UpdateMutation = gql`\n  mutation($id: ID!, $complete: Boolean!) {\n    updateTodo(id: $id, complete: $complete)\n  }\n  `;\n\nclass App extends Component {\n\n  updateTodo = async todo => {\n    await this.props.updateTodo({\n      variables: {\n        id: todo.id,\n        complete: !todo.complete\n      }\n    })\n  }\n\n\n\n  render() {\n    //Save the mongodb todos and loading status to props\n    const {\n      data: { loading, todos }\n    } = this.props;\n    if (loading) {\n      return null;\n    }\n\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div style={{ margin: \"auto\", width: 400 }}>\n          {/* Paper component is a material ui background */}\n          <Paper elevation={1}>\n            {/* <Form submit={this.createTodo} /> */}\n            <List>\n\n              {/* each todo from the database is mapped to a list item React component */}\n              {todos.map(todo =>\n                <ListItem\n                  key={todo.id}\n                  role={undefined}\n                  dense\n                  button\n                  //call update todo function when list item is clicked\n                  onClick={() => this.updateTodo(todo)}\n                >\n                  <Checkbox\n                    // each todo's complete status is \n                    //set as the checked state in the checkbox component\n                    checked={todo.complete}\n                    //tabIndex={-1}\n                    disableRipple\n                  />\n                  {/* text from the todo is set to the ListItemText component's primary text */}\n                  <ListItemText primary={todo.text} />\n                  <ListItemSecondaryAction>\n                    {/* Call remove function when iconbutton component is clicked */}\n                    {/* <IconButton onClick={() => this.removeTodo(todo)}> */}\n                    <IconButton onClick={() => this.removeTodo(todo)}>\n                      <CloseIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              )}\n            </List>\n          </Paper>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default compose(graphql(TodosQuery), graphql(UpdateMutation, { name: 'updateTodo' }))(App);\n"]},"metadata":{},"sourceType":"module"}